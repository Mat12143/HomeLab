services:
  # Reverse proxy
  traefik:
    container_name: traefik
    image: traefik
    restart: unless-stopped
    ports:
      - 80:80
      - 443:443
    command:
      - "--log.level=DEBUG"
      - "--api.dashboard=true"

      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"

      - "--certificatesresolvers.letsencrypt.acme.dnschallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.dnschallenge.provider=duckdns"
      - "--certificatesresolvers.letsencrypt.acme.email=mail@mail.com"
      - "--certificatesresolvers.letsencrypt.acme.dnschallenge.disablePropagationCheck=true"
      - "--certificatesresolvers.letsencrypt.acme.dnschallenge.resolvers=1.1.1.1:53,8.8.8.8:53"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"

      - "--certificatesresolvers.tailscale.tailscale=true"

      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.websecure.http.tls=true"
      - "--entrypoints.websecure.http.tls.certResolver=letsencrypt"
      - "--entrypoints.websecure.http.tls.domains[0].main=${HOMEPAGE_VAR_DOMAIN}"
      - "--entrypoints.websecure.http.tls.domains[0].sans=*.${HOMEPAGE_VAR_DOMAIN}"

      - "--providers.file=true"
      - "--providers.file.filename=/etc/traefik/rules.yaml"
      - "--providers.file.watch=true"
    volumes:
      - ./data/proxy/:/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./config/traefik/rules.yaml:/etc/traefik/rules.yaml:ro
      - /var/run/tailscale/tailscaled.sock:/var/run/tailscale/tailscaled.sock:ro
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`proxy.${HOMEPAGE_VAR_DOMAIN}`)"
      - "traefik.http.routers.api.entryPoints=websecure"
      - "traefik.http.routers.api.service=api@internal"
      - "traefik.http.middlewares.auth.basicAuth.users=admin:${TRAEFIK_PW_HASH}"
      - "traefik.http.routers.api.middlewares=auth"
    environment:
      DUCKDNS_TOKEN: "${DUCKDNS_TOKEN}"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    env_file: ./.env

  # Pihole DNS AD Blocking service
  adguardhome:
    container_name: adguardhome
    image: adguard/adguardhome
    restart: unless-stopped
    network_mode: host
    # Network mode in order to use DHCP
    volumes:
      - ./data/adguardhome/work:/opt/adguardhome/work
      - ./data/adguardhome/conf:/opt/adguardhome/conf
    cap_add:
      - NET_ADMIN

  # Homepage for the lab
  homepage:
    image: ghcr.io/gethomepage/homepage:latest
    container_name: homepage
    env_file:
      - path: ./.env
    volumes:
      - ./config/homepage/:/app/config
      # Docker socket in order to view and display containers status
      - /var/run/docker.sock:/var/run/docker.sock:ro
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.homepage.rule=Host(`${HOMEPAGE_VAR_DOMAIN}`)"
      - "traefik.http.routers.homepage.entryPoints=websecure"

  # Backup frontend
  # backrest:
  #   image: garethgeorge/backrest:latest
  #   container_name: backrest
  #   volumes:
  #     - ./data/backrest/data:/data
  #     - ./data/backrest/config:/config
  #     # TODO: Add cache path to ignore on backup
  #     - ./data/backrest/cache:/cache
  #     - ./data/backrest/restore:/restore
  #     # TODO: Add mount points for backup
  #   environment:
  #     - BACKREST_DATA=/data # path for backrest data. restic binary and the database are placed here.
  #     - BACKREST_CONFIG=/config/config.json # path for the backrest config file.
  #     - XDG_CACHE_HOME=/cache # path for the restic cache which greatly improves performance.
  #   restart: unless-stopped
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.backrest.rule=Host(`backup.${HOMEPAGE_VAR_DOMAIN}`)"
  #     - "traefik.http.routers.backrest.entryPoints=websecure"
  #     - "traefik.http.services.backrest.loadbalancer.server.port=9898"

  gatus:
    image: twinproduction/gatus:latest
    container_name: gatus
    restart: unless-stopped
    env_file:
      - path: ./.env
    volumes:
      - ./config/gatus/config.yaml:/config/config.yaml:ro
      - ./data/gatus/:/data/
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.gatus.rule=Host(`ping.${HOMEPAGE_VAR_DOMAIN}`)"
      - "traefik.http.routers.gatus.entryPoints=websecure"

  navidrome:
    image: deluan/navidrome:latest
    restart: unless-stopped
    container_name: navidrome
    env_file:
      - path: ./.env
    environment:
      ND_SCANSCHEDULE: 1h
      ND_LOGLEVEL: info
      ND_SESSIONTIMEOUT: 24h
      ND_BASEURL: ""
      ND_LASTFM_APIKEY: ${LAST_FM_KEY}
      ND_LASTFM_SECRET: ${LAST_FM_SECRET}
    volumes:
      - "./data/navidrome:/data:rw"
      - "/home/matteo/Music/:/music:ro"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.navidrome.rule=Host(`music.${HOMEPAGE_VAR_DOMAIN}`)"
      - "traefik.http.routers.navidrome.entryPoints=websecure"
      # In order to access the navidrome istance using tailscale
      - "traefik.http.routers.navidromeext.rule=Host(`${TAILSCALE_DOMAIN}`)"
      - "traefik.http.routers.navidromeext.tls.certresolver=tailscale"

  diun:
    image: crazymax/diun:latest
    command: serve
    hostname: homi
    container_name: diun
    restart: unless-stopped
    env_file:
      - path: ./.env
    volumes:
      - ./data/diun/:/data
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - TZ=${TZ}
      - DIUN_WATCH_WORKERS=20
      - DIUN_WATCH_SCHEDULE=0 */6 * * *
      - DIUN_WATCH_JITTER=30s
      - DIUN_PROVIDERS_DOCKER=true
      - DIUN_PROVIDERS_DOCKER_WATCHBYDEFAULT=true
      - DIUN_NOTIF_TELEGRAM_TOKEN=${DIUN_TELEGRAM_TOKEN}
      - DIUN_NOTIF_TELEGRAM_CHATIDS=${DIUN_TELEGRAM_CHAT}
      - DIUN_NOTIF_TELEGRAM_TEMPLATEBODY=Docker tag {{ if .Entry.Image.HubLink }}[**{{ .Entry.Image }}**]({{ .Entry.Image.HubLink }}){{ else }}**{{ .Entry.Image }}**{{ end }} is available on {{ .Entry.Image.Domain }} ({{ .Meta.Hostname }})
