services:

  traefik:
    container_name: traefik
    image: traefik
    restart: unless-stopped
    ports:
      - 80:80
      - 443:443
    command:
      - "--log.level=DEBUG"
      - "--providers.docker=true"
      - "--api.dashboard=true"
      - "--providers.docker.exposedbydefault=false"
      - "--certificatesresolvers.letsencrypt.acme.dnschallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.dnschallenge.provider=duckdns"
      - "--certificatesresolvers.letsencrypt.acme.email=mail@mail.com"
      - "--certificatesresolvers.letsencrypt.acme.dnschallenge.disablePropagationCheck=true"
      - "--certificatesresolvers.letsencrypt.acme.dnschallenge.resolvers=1.1.1.1:53,8.8.8.8:53"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.websecure.http.tls=true"
      - "--entrypoints.websecure.http.tls.certResolver=letsencrypt"
      - "--entrypoints.websecure.http.tls.domains[0].main=${HOMEPAGE_VAR_DOMAIN}"
      - "--entrypoints.websecure.http.tls.domains[0].sans=*.${HOMEPAGE_VAR_DOMAIN}"

      - "--providers.file=true"
      - "--providers.file.filename=/etc/traefik/rules.yaml"
      - "--providers.file.watch=true"
    volumes:
      - ./data/proxy/:/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./config/traefik/rules.yaml:/etc/traefik/rules.yaml:ro
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.api.rule=Host(`proxy.${HOMEPAGE_VAR_DOMAIN}`)'
      - 'traefik.http.routers.api.entryPoints=websecure'
      - 'traefik.http.routers.api.service=api@internal'
      - 'traefik.http.middlewares.auth.basicAuth.users=admin:${TRAEFIK_PW_HASH}'
      - 'traefik.http.routers.api.middlewares=auth'
    environment:
      DUCKDNS_TOKEN: "${DUCKDNS_TOKEN}"
    env_file: ./.env


  # Pihole DNS AD Blocking service
  pihole:
    container_name: pihole
    image: pihole/pihole:latest
    restart: unless-stopped
    network_mode: host
    # Network mode in order to use DHCP
    environment:
      - WEB_PORT=8080
      - TZ=${TZ}
    volumes:
      - ./data/pihole/config:/etc/pihole
      - ./data/pihole/dnsmasq:/etc/dnsmasq.d
    cap_add:
      - NET_ADMIN

  # Homepage for the lab
  homepage:
    image: ghcr.io/gethomepage/homepage:latest
    container_name: homepage
    env_file:
      - path: ./.env
    volumes:
      - ./config/homepage/:/app/config
      # Docker socket in order to view and display containers status
      - /var/run/docker.sock:/var/run/docker.sock:ro
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.homepage.rule=Host(`${HOMEPAGE_VAR_DOMAIN}`)"
      - "traefik.http.routers.homepage.entryPoints=websecure"

  # Backup frontend
  backrest:
    image: garethgeorge/backrest:latest
    container_name: backrest
    volumes:
      - ./data/backrest/data:/data
      - ./data/backrest/config:/config
      # TODO: Add cache path to ignore on backup
      - ./data/backrest/cache:/cache
      - ./data/backrest/restore:/restore
      # TODO: Add mount points for backup
    environment:
      - BACKREST_DATA=/data # path for backrest data. restic binary and the database are placed here.
      - BACKREST_CONFIG=/config/config.json # path for the backrest config file.
      - XDG_CACHE_HOME=/cache # path for the restic cache which greatly improves performance.
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backrest.rule=Host(`backrest.${HOMEPAGE_VAR_DOMAIN}`)"
      - "traefik.http.routers.backrest.entryPoints=websecure"
      - "traefik.http.services.backrest.loadbalancer.server.port=9898"

  diun:
    image: crazymax/diun:latest
    command: serve
    hostname: homi
    container_name: diun
    restart: unless-stopped
    env_file:
      - path: ./.env
    volumes:
      - ./data/diun/:/data
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - TZ=${TZ}
      - DIUN_WATCH_WORKERS=20
      - DIUN_WATCH_SCHEDULE=0 */6 * * *
      - DIUN_WATCH_JITTER=30s
      - DIUN_PROVIDERS_DOCKER=true
      - DIUN_PROVIDERS_DOCKER_WATCHBYDEFAULT=true
      - DIUN_NOTIF_TELEGRAM_TOKEN=${DIUN_TELEGRAM_TOKEN}
      - DIUN_NOTIF_TELEGRAM_CHATIDS=${DIUN_TELEGRAM_CHAT}
      - DIUN_NOTIF_TELEGRAM_TEMPLATEBODY=Docker tag {{ if .Entry.Image.HubLink }}[**{{ .Entry.Image }}**]({{ .Entry.Image.HubLink }}){{ else }}**{{ .Entry.Image }}**{{ end }} is available on {{ .Entry.Image.Domain }} ({{ .Meta.Hostname }})
